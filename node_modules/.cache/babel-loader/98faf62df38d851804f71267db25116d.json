{"ast":null,"code":"import _toConsumableArray from \"/home/hwijendra/Work/robot-stimulation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/hwijendra/Work/robot-stimulation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hwijendra/Work/robot-stimulation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as constants from '../constants';\n\nvar Robot =\n/*#__PURE__*/\nfunction () {\n  function Robot(table) {\n    _classCallCheck(this, Robot);\n\n    this.commandList = [];\n    this.command = null;\n    this.cordinateX = null;\n    this.cordinateY = null;\n    this.direction = constants.Direction.SOUTH; // Default direction\n\n    this.table = table;\n  }\n\n  _createClass(Robot, [{\n    key: \"nextCommand\",\n    value: function nextCommand(command) {\n      if (this.commandList.length >= 1) {\n        this.commandList = [].concat(_toConsumableArray(this.commandList), [command]);\n      } else {\n        if (command.instruction === constants.CommandInstruction.PLACE) {\n          this.commandList = [].concat(_toConsumableArray(this.commandList), [command]);\n        } else {\n          throw new Error(constants.ERR_INVALID_FIRST_COMMAND);\n        }\n      }\n\n      this.command = command;\n\n      switch (this.command.instruction.name) {\n        case constants.CommandInstruction.PLACE.name:\n          {\n            this.place();\n            break;\n          }\n\n        case constants.CommandInstruction.MOVE.name:\n          {\n            this.move();\n            break;\n          }\n\n        case constants.CommandInstruction.LEFT.name:\n          {\n            this.left();\n            break;\n          }\n\n        case constants.CommandInstruction.RIGHT.name:\n          {\n            this.right();\n            break;\n          }\n\n        case constants.CommandInstruction.REPORT.name:\n          {\n            return \"X: \".concat(this.cordinateX, \", Y: \").concat(this.cordinateY, \", Direction: \").concat(this.direction.name);\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"place\",\n    value: function place() {\n      // the given position is a valid one then update the robot properties\n      if (this.table.isValidPosition(this.command.cordinateX, this.command.cordinateY)) {\n        this.cordinateX = this.command.cordinateX;\n        this.cordinateY = this.command.cordinateY;\n        this.direction = this.command.direction;\n      } else {\n        throw new Error(constants.ERR_INVALID_ROBOT_POSITION);\n      }\n    } // This function move robot to one unit by checking its facing\n\n  }, {\n    key: \"move\",\n    value: function move() {\n      var x = this.cordinateX;\n      var y = this.cordinateY;\n\n      switch (this.direction.name) {\n        case constants.Direction.NORTH.name:\n          {\n            y++;\n            break;\n          }\n\n        case constants.Direction.SOUTH.name:\n          {\n            y--;\n            break;\n          }\n\n        case constants.Direction.EAST.name:\n          {\n            x++;\n            break;\n          }\n\n        case constants.Direction.WEST.name:\n          {\n            x--;\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n\n      if (this.table.isValidPosition(x, y)) {\n        this.cordinateX = x;\n        this.cordinateY = y;\n      } else {\n        throw new Error(constants.WARNING_CANNOT_MOVE);\n      }\n    } // This will change the robot direction/facing to left\n\n  }, {\n    key: \"left\",\n    value: function left() {\n      switch (this.direction.name) {\n        case constants.Direction.NORTH.name:\n          {\n            this.direction = constants.Direction.WEST;\n            break;\n          }\n\n        case constants.Direction.SOUTH.name:\n          {\n            this.direction = constants.Direction.EAST;\n            break;\n          }\n\n        case constants.Direction.EAST.name:\n          {\n            this.direction = constants.Direction.NORTH;\n            break;\n          }\n\n        case constants.Direction.WEST.name:\n          {\n            this.direction = constants.Direction.SOUTH;\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    } // This will change the robot direction/facing to right\n\n  }, {\n    key: \"right\",\n    value: function right() {\n      switch (this.direction.name) {\n        case constants.Direction.NORTH.name:\n          {\n            this.direction = constants.Direction.EAST;\n            break;\n          }\n\n        case constants.Direction.SOUTH.name:\n          {\n            this.direction = constants.Direction.WEST;\n            break;\n          }\n\n        case constants.Direction.EAST.name:\n          {\n            this.direction = constants.Direction.SOUTH;\n            break;\n          }\n\n        case constants.Direction.WEST.name:\n          {\n            this.direction = constants.Direction.NORTH;\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    } // return cordinate X,cordinate Y and direction of the robot\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.cordinateX,\n        y: this.cordinateY,\n        direction: this.direction\n      };\n    }\n  }]);\n\n  return Robot;\n}();\n\nexport { Robot as default };","map":{"version":3,"sources":["/home/hwijendra/Work/robot-stimulation/src/classes/Robot.js"],"names":["constants","Robot","table","commandList","command","cordinateX","cordinateY","direction","Direction","SOUTH","length","instruction","CommandInstruction","PLACE","Error","ERR_INVALID_FIRST_COMMAND","name","place","MOVE","move","LEFT","left","RIGHT","right","REPORT","isValidPosition","ERR_INVALID_ROBOT_POSITION","x","y","NORTH","EAST","WEST","WARNING_CANNOT_MOVE"],"mappings":"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","sourcesContent":["import * as constants from '../constants';\n\nexport default class Robot {\n    constructor(table) {\n        this.commandList = [];\n        this.command = null;\n        this.cordinateX = null;\n        this.cordinateY = null;\n        this.direction = constants.Direction.SOUTH; // Default direction\n        this.table = table;\n    }\n\n    nextCommand(command) {\n        if (this.commandList.length >= 1) {\n            this.commandList = [...this.commandList, command];\n        } else {\n            if (command.instruction === constants.CommandInstruction.PLACE) {\n                this.commandList = [...this.commandList, command];\n            } else {\n                throw new Error(constants.ERR_INVALID_FIRST_COMMAND);\n            }\n        }\n\n        this.command = command;\n\n        switch (this.command.instruction.name) {\n            case constants.CommandInstruction.PLACE.name: {\n                this.place();\n                break;\n            }\n            case constants.CommandInstruction.MOVE.name: {\n                this.move();\n                break;\n            }\n            case constants.CommandInstruction.LEFT.name: {\n                this.left();\n                break;\n            }\n            case constants.CommandInstruction.RIGHT.name: {\n                this.right();\n                break;\n            }\n            case constants.CommandInstruction.REPORT.name: {\n                return `X: ${this.cordinateX}, Y: ${this.cordinateY}, Direction: ${\n                    this.direction.name\n                    }`;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    place() {\n        // the given position is a valid one then update the robot properties\n        if (\n            this.table.isValidPosition(\n                this.command.cordinateX,\n                this.command.cordinateY\n            )\n        ) {\n            this.cordinateX = this.command.cordinateX;\n            this.cordinateY = this.command.cordinateY;\n            this.direction = this.command.direction;\n        } else {\n            throw new Error(constants.ERR_INVALID_ROBOT_POSITION);\n        }\n    }\n\n    // This function move robot to one unit by checking its facing\n    move() {\n        let x = this.cordinateX;\n        let y = this.cordinateY;\n\n        switch (this.direction.name) {\n            case constants.Direction.NORTH.name: {\n                y++;\n                break;\n            }\n            case constants.Direction.SOUTH.name: {\n                y--;\n                break;\n            }\n            case constants.Direction.EAST.name: {\n                x++;\n                break;\n            }\n            case constants.Direction.WEST.name: {\n                x--;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n\n        if (this.table.isValidPosition(x, y)) {\n            this.cordinateX = x;\n            this.cordinateY = y;\n        } else {\n            throw new Error(constants.WARNING_CANNOT_MOVE);\n        }\n    }\n\n    // This will change the robot direction/facing to left\n    left() {\n        switch (this.direction.name) {\n            case constants.Direction.NORTH.name: {\n                this.direction = constants.Direction.WEST;\n                break;\n            }\n            case constants.Direction.SOUTH.name: {\n                this.direction = constants.Direction.EAST;\n                break;\n            }\n            case constants.Direction.EAST.name: {\n                this.direction = constants.Direction.NORTH;\n                break;\n            }\n            case constants.Direction.WEST.name: {\n                this.direction = constants.Direction.SOUTH;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    // This will change the robot direction/facing to right\n    right() {\n        switch (this.direction.name) {\n            case constants.Direction.NORTH.name: {\n                this.direction = constants.Direction.EAST;\n                break;\n            }\n            case constants.Direction.SOUTH.name: {\n                this.direction = constants.Direction.WEST;\n                break;\n            }\n            case constants.Direction.EAST.name: {\n                this.direction = constants.Direction.SOUTH;\n                break;\n            }\n            case constants.Direction.WEST.name: {\n                this.direction = constants.Direction.NORTH;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    // return cordinate X,cordinate Y and direction of the robot\n    getPosition() {\n        return {\n            x: this.cordinateX,\n            y: this.cordinateY,\n            direction: this.direction,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}