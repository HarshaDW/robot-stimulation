{"ast":null,"code":"import _classCallCheck from \"/home/hwijendra/Work/robot-stimulation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hwijendra/Work/robot-stimulation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as constants from '../constants';\n\nvar Command =\n/*#__PURE__*/\nfunction () {\n  function Command() {\n    _classCallCheck(this, Command);\n\n    this.instruction = null; // PLACE/MOVE/LEFT/RIGHT/REPORT\n\n    this.cordinateX = null;\n    this.cordinateY = null;\n    this.direction = null;\n  }\n\n  _createClass(Command, [{\n    key: \"parse\",\n    value: function parse(commandInput) {\n      var regExp = new RegExp(constants.REGEX_USER_INPUT, 'g');\n      var match = regExp.exec(commandInput);\n\n      if (match && match.length >= 1) {\n        if (match[1] === constants.CommandInstruction.PLACE.name) {\n          if (match[2] && match[3] && match[4]) {\n            this.instruction = constants.CommandInstruction.PLACE;\n            this.cordinateX = parseInt(match[2]);\n            this.cordinateY = parseInt(match[3]);\n            var facing = match[4];\n\n            if (facing === constants.Direction.NORTH.name) {\n              this.direction = constants.Direction.NORTH;\n            } else if (facing === constants.Direction.SOUTH.name) {\n              this.direction = constants.Direction.SOUTH;\n            } else if (facing === constants.Direction.EAST.name) {\n              this.direction = constants.Direction.EAST;\n            } else if (facing === constants.Direction.WEST.name) {\n              this.direction = constants.Direction.WEST;\n            } else {\n              throw new Error(constants.ERR_INVALID_ROBOT_DIRECTION);\n            }\n          } else {\n            throw new Error(constants.ERR_INVALID_PLACE_COMMAND);\n          }\n        } else if (match[1] === constants.CommandInstruction.MOVE.name) {\n          this.instruction = constants.CommandInstruction.MOVE;\n        } else if (match[1] === constants.CommandInstruction.LEFT.name) {\n          this.instruction = constants.CommandInstruction.LEFT;\n        } else if (match[1] === constants.CommandInstruction.RIGHT.name) {\n          this.instruction = constants.CommandInstruction.RIGHT;\n        } else if (match[1] === constants.CommandInstruction.REPORT.name) {\n          this.instruction = constants.CommandInstruction.REPORT;\n        } else {\n          throw new Error(constants.ERR_INVALID_COMMAND);\n        }\n      } else {\n        throw new Error(constants.ERR_INVALID_COMMAND);\n      }\n    }\n  }]);\n\n  return Command;\n}();\n\nexport { Command as default };","map":{"version":3,"sources":["/home/hwijendra/Work/robot-stimulation/src/classes/Command.js"],"names":["constants","Command","instruction","cordinateX","cordinateY","direction","commandInput","regExp","RegExp","REGEX_USER_INPUT","match","exec","length","CommandInstruction","PLACE","name","parseInt","facing","Direction","NORTH","SOUTH","EAST","WEST","Error","ERR_INVALID_ROBOT_DIRECTION","ERR_INVALID_PLACE_COMMAND","MOVE","LEFT","RIGHT","REPORT","ERR_INVALID_COMMAND"],"mappings":";;AAAA,OAAO,KAAKA,SAAZ,MAA2B,cAA3B;;IACqBC,O;;;AACjB,qBAAc;AAAA;;AACV,SAAKC,WAAL,GAAmB,IAAnB,CADU,CACe;;AACzB,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACH;;;;0BAEKC,Y,EAAc;AAChB,UAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAWR,SAAS,CAACS,gBAArB,EAAuC,GAAvC,CAAb;AACA,UAAIC,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAYL,YAAZ,CAAZ;;AACA,UAAII,KAAK,IAAIA,KAAK,CAACE,MAAN,IAAgB,CAA7B,EAAgC;AAC5B,YAAIF,KAAK,CAAC,CAAD,CAAL,KAAaV,SAAS,CAACa,kBAAV,CAA6BC,KAA7B,CAAmCC,IAApD,EAA0D;AACtD,cAAIL,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAjB,IAAwBA,KAAK,CAAC,CAAD,CAAjC,EAAsC;AAClC,iBAAKR,WAAL,GAAmBF,SAAS,CAACa,kBAAV,CAA6BC,KAAhD;AACA,iBAAKX,UAAL,GAAkBa,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,CAA1B;AACA,iBAAKN,UAAL,GAAkBY,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,CAA1B;AACA,gBAAIO,MAAM,GAAGP,KAAK,CAAC,CAAD,CAAlB;;AAEA,gBAAIO,MAAM,KAAKjB,SAAS,CAACkB,SAAV,CAAoBC,KAApB,CAA0BJ,IAAzC,EAA+C;AAC3C,mBAAKV,SAAL,GAAiBL,SAAS,CAACkB,SAAV,CAAoBC,KAArC;AACH,aAFD,MAEO,IAAIF,MAAM,KAAKjB,SAAS,CAACkB,SAAV,CAAoBE,KAApB,CAA0BL,IAAzC,EAA+C;AAClD,mBAAKV,SAAL,GAAiBL,SAAS,CAACkB,SAAV,CAAoBE,KAArC;AACH,aAFM,MAEA,IAAIH,MAAM,KAAKjB,SAAS,CAACkB,SAAV,CAAoBG,IAApB,CAAyBN,IAAxC,EAA8C;AACjD,mBAAKV,SAAL,GAAiBL,SAAS,CAACkB,SAAV,CAAoBG,IAArC;AACH,aAFM,MAEA,IAAIJ,MAAM,KAAKjB,SAAS,CAACkB,SAAV,CAAoBI,IAApB,CAAyBP,IAAxC,EAA8C;AACjD,mBAAKV,SAAL,GAAiBL,SAAS,CAACkB,SAAV,CAAoBI,IAArC;AACH,aAFM,MAEA;AACH,oBAAM,IAAIC,KAAJ,CAAUvB,SAAS,CAACwB,2BAApB,CAAN;AACH;AACJ,WAjBD,MAiBO;AACH,kBAAM,IAAID,KAAJ,CAAUvB,SAAS,CAACyB,yBAApB,CAAN;AACH;AACJ,SArBD,MAqBO,IAAIf,KAAK,CAAC,CAAD,CAAL,KAAaV,SAAS,CAACa,kBAAV,CAA6Ba,IAA7B,CAAkCX,IAAnD,EAAyD;AAC5D,eAAKb,WAAL,GAAmBF,SAAS,CAACa,kBAAV,CAA6Ba,IAAhD;AACH,SAFM,MAEA,IAAIhB,KAAK,CAAC,CAAD,CAAL,KAAaV,SAAS,CAACa,kBAAV,CAA6Bc,IAA7B,CAAkCZ,IAAnD,EAAyD;AAC5D,eAAKb,WAAL,GAAmBF,SAAS,CAACa,kBAAV,CAA6Bc,IAAhD;AACH,SAFM,MAEA,IAAIjB,KAAK,CAAC,CAAD,CAAL,KAAaV,SAAS,CAACa,kBAAV,CAA6Be,KAA7B,CAAmCb,IAApD,EAA0D;AAC7D,eAAKb,WAAL,GAAmBF,SAAS,CAACa,kBAAV,CAA6Be,KAAhD;AACH,SAFM,MAEA,IAAIlB,KAAK,CAAC,CAAD,CAAL,KAAaV,SAAS,CAACa,kBAAV,CAA6BgB,MAA7B,CAAoCd,IAArD,EAA2D;AAC9D,eAAKb,WAAL,GAAmBF,SAAS,CAACa,kBAAV,CAA6BgB,MAAhD;AACH,SAFM,MAEA;AACH,gBAAM,IAAIN,KAAJ,CAAUvB,SAAS,CAAC8B,mBAApB,CAAN;AACH;AACJ,OAjCD,MAiCO;AACH,cAAM,IAAIP,KAAJ,CAAUvB,SAAS,CAAC8B,mBAApB,CAAN;AACH;AACJ;;;;;;SA/CgB7B,O","sourcesContent":["import * as constants from '../constants';\nexport default class Command {\n    constructor() {\n        this.instruction = null; // PLACE/MOVE/LEFT/RIGHT/REPORT\n        this.cordinateX = null;\n        this.cordinateY = null;\n        this.direction = null;\n    }\n\n    parse(commandInput) {\n        let regExp = new RegExp(constants.REGEX_USER_INPUT, 'g');\n        let match = regExp.exec(commandInput);\n        if (match && match.length >= 1) {\n            if (match[1] === constants.CommandInstruction.PLACE.name) {\n                if (match[2] && match[3] && match[4]) {\n                    this.instruction = constants.CommandInstruction.PLACE;\n                    this.cordinateX = parseInt(match[2]);\n                    this.cordinateY = parseInt(match[3]);\n                    let facing = match[4];\n\n                    if (facing === constants.Direction.NORTH.name) {\n                        this.direction = constants.Direction.NORTH;\n                    } else if (facing === constants.Direction.SOUTH.name) {\n                        this.direction = constants.Direction.SOUTH;\n                    } else if (facing === constants.Direction.EAST.name) {\n                        this.direction = constants.Direction.EAST;\n                    } else if (facing === constants.Direction.WEST.name) {\n                        this.direction = constants.Direction.WEST;\n                    } else {\n                        throw new Error(constants.ERR_INVALID_ROBOT_DIRECTION);\n                    }\n                } else {\n                    throw new Error(constants.ERR_INVALID_PLACE_COMMAND);\n                }\n            } else if (match[1] === constants.CommandInstruction.MOVE.name) {\n                this.instruction = constants.CommandInstruction.MOVE;\n            } else if (match[1] === constants.CommandInstruction.LEFT.name) {\n                this.instruction = constants.CommandInstruction.LEFT;\n            } else if (match[1] === constants.CommandInstruction.RIGHT.name) {\n                this.instruction = constants.CommandInstruction.RIGHT;\n            } else if (match[1] === constants.CommandInstruction.REPORT.name) {\n                this.instruction = constants.CommandInstruction.REPORT;\n            } else {\n                throw new Error(constants.ERR_INVALID_COMMAND);\n            }\n        } else {\n            throw new Error(constants.ERR_INVALID_COMMAND);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}